{"ast":null,"code":"var _jsxFileName = \"/home/aspirine/Documents/GitHub/KoohMusic/src/context/PlayerState.js\";\nimport React, { useReducer } from 'react';\nimport playerContext from './playerContext';\nimport playerReducer from './playerReducer';\nimport { song_list } from './songs';\nimport { SET_CURRENT_SONG, TOGGLE_RANDOM, TOGGLE_REPEAT, TOGGLE_PLAYING, SET_SONGS_ARRAY } from './types';\n\nconst PlayerState = props => {\n  const initialState = {\n    currentSong: 0,\n    songslist: song_list,\n    repeat: false,\n    random: false,\n    playing: false,\n    audio: null\n  };\n  const [state, dispatch] = useReducer(playerReducer, initialState); // Set songs array\n\n  const songsSet = songArr => dispatch({\n    type: SET_SONGS_ARRAY,\n    data: songArr\n  }); // Set playing state\n\n\n  const togglePlaying = () => dispatch({\n    type: TOGGLE_PLAYING,\n    data: state.playing ? false : true\n  }); // Set current song\n\n\n  const SetCurrent = id => dispatch({\n    type: SET_CURRENT_SONG,\n    data: id\n  }); // Prev song\n\n\n  const prevSong = () => {\n    if (state.random) {\n      return SetCurrent(~~(Math.random() * state.songslist.length));\n    }\n\n    if (state.currentSong === 0) {\n      return SetCurrent(state.songslist.length - 1);\n    } else {\n      return SetCurrent(state.currentSong - 1);\n    }\n  }; // Next song\n\n\n  const nextSong = () => {\n    if (state.random) {\n      return SetCurrent(~~(Math.random() * state.songslist.length));\n    }\n\n    if (state.currentSong === state.songslist.length - 1) {\n      SetCurrent(0);\n    } else {\n      SetCurrent(state.currentSong + 1);\n    }\n  }; // Repeat and Random\n\n\n  const toggleRepeat = id => dispatch({\n    type: TOGGLE_REPEAT,\n    data: state.repeat ? false : true\n  });\n\n  const toggleRandom = id => dispatch({\n    type: TOGGLE_RANDOM,\n    data: state.random ? false : true\n  }); // End of Song\n\n\n  const handleEnd = () => {\n    // Check for random and repeat options\n    if (state.random) {\n      return SetCurrent(~~(Math.random() * state.songslist.length));\n    } else {\n      if (state.repeat) {\n        nextSong();\n      } else if (state.currentSong === state.songslist.length - 1) {\n        return;\n      } else {\n        nextSong();\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(playerContext.Provider, {\n    value: {\n      currentSong: state.currentSong,\n      // songs: state.songs,\n      songslist: state.songslist,\n      repeat: state.repeat,\n      random: state.random,\n      playing: state.playing,\n      audio: state.audio,\n      nextSong,\n      prevSong,\n      SetCurrent,\n      toggleRandom,\n      toggleRepeat,\n      togglePlaying,\n      handleEnd,\n      songsSet\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default PlayerState;","map":{"version":3,"sources":["/home/aspirine/Documents/GitHub/KoohMusic/src/context/PlayerState.js"],"names":["React","useReducer","playerContext","playerReducer","song_list","SET_CURRENT_SONG","TOGGLE_RANDOM","TOGGLE_REPEAT","TOGGLE_PLAYING","SET_SONGS_ARRAY","PlayerState","props","initialState","currentSong","songslist","repeat","random","playing","audio","state","dispatch","songsSet","songArr","type","data","togglePlaying","SetCurrent","id","prevSong","Math","length","nextSong","toggleRepeat","toggleRandom","handleEnd","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react'\nimport playerContext from './playerContext'\nimport playerReducer from './playerReducer'\nimport { song_list } from './songs'\n\nimport {\n  SET_CURRENT_SONG,\n  TOGGLE_RANDOM,\n  TOGGLE_REPEAT,\n  TOGGLE_PLAYING,\n  SET_SONGS_ARRAY,\n} from './types'\n\nconst PlayerState = (props) => {\n  const initialState = {\n    currentSong: 0,\n    songslist: song_list,\n    repeat: false,\n    random: false,\n    playing: false,\n    audio: null,\n  }\n  const [state, dispatch] = useReducer(playerReducer, initialState)\n\n  // Set songs array\n  const songsSet = (songArr) =>\n    dispatch({ type: SET_SONGS_ARRAY, data: songArr })\n  // Set playing state\n  const togglePlaying = () =>\n    dispatch({ type: TOGGLE_PLAYING, data: state.playing ? false : true })\n  // Set current song\n  const SetCurrent = (id) => dispatch({ type: SET_CURRENT_SONG, data: id })\n\n  // Prev song\n  const prevSong = () => {\n    if (state.random) {\n      return SetCurrent(~~(Math.random() * state.songslist.length))\n    }\n\n    if (state.currentSong === 0) {\n      return SetCurrent(state.songslist.length - 1)\n    } else {\n      return SetCurrent(state.currentSong - 1)\n    }\n  }\n  // Next song\n  const nextSong = () => {\n    if (state.random) {\n      return SetCurrent(~~(Math.random() * state.songslist.length))\n    }\n    if (state.currentSong === state.songslist.length - 1) {\n      SetCurrent(0)\n    } else {\n      SetCurrent(state.currentSong + 1)\n    }\n  }\n\n  // Repeat and Random\n  const toggleRepeat = (id) =>\n    dispatch({ type: TOGGLE_REPEAT, data: state.repeat ? false : true })\n  const toggleRandom = (id) =>\n    dispatch({ type: TOGGLE_RANDOM, data: state.random ? false : true })\n\n  // End of Song\n  const handleEnd = () => {\n    // Check for random and repeat options\n    if (state.random) {\n      return SetCurrent(~~(Math.random() * state.songslist.length))\n    } else {\n      if (state.repeat) {\n        nextSong()\n      } else if (state.currentSong === state.songslist.length - 1) {\n        return\n      } else {\n        nextSong()\n      }\n    }\n  }\n\n  return (\n    <playerContext.Provider\n      value={{\n        currentSong: state.currentSong,\n        // songs: state.songs,\n        songslist: state.songslist,\n        repeat: state.repeat,\n        random: state.random,\n        playing: state.playing,\n        audio: state.audio,\n        nextSong,\n        prevSong,\n        SetCurrent,\n        toggleRandom,\n        toggleRepeat,\n        togglePlaying,\n        handleEnd,\n        songsSet,\n      }}\n    >\n      {props.children}\n    </playerContext.Provider>\n  )\n}\n\nexport default PlayerState\n"]},"metadata":{},"sourceType":"module"}